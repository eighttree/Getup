/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$sprite-btn3-name: 'btn3';
$sprite-btn3-x: 0px;
$sprite-btn3-y: 0px;
$sprite-btn3-offset-x: 0px;
$sprite-btn3-offset-y: 0px;
$sprite-btn3-width: 171px;
$sprite-btn3-height: 34px;
$sprite-btn3-total-width: 171px;
$sprite-btn3-total-height: 72px;
$sprite-btn3-image: '../img/sprite-1.png';
$sprite-btn3: (0px, 0px, 0px, 0px, 171px, 34px, 171px, 72px, '../img/sprite-1.png', 'btn3', );
$sprite-btn4-name: 'btn4';
$sprite-btn4-x: 0px;
$sprite-btn4-y: 38px;
$sprite-btn4-offset-x: 0px;
$sprite-btn4-offset-y: -38px;
$sprite-btn4-width: 171px;
$sprite-btn4-height: 34px;
$sprite-btn4-total-width: 171px;
$sprite-btn4-total-height: 72px;
$sprite-btn4-image: '../img/sprite-1.png';
$sprite-btn4: (0px, 38px, 0px, -38px, 171px, 34px, 171px, 72px, '../img/sprite-1.png', 'btn4', );
$sprite-spritesheet-width: 171px;
$sprite-spritesheet-height: 72px;
$sprite-spritesheet-image: '../img/sprite-1.png';
$sprite-spritesheet-sprites: ($sprite-btn3, $sprite-btn4, );
$sprite-spritesheet: (171px, 72px, '../img/sprite-1.png', $sprite-spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: 0;
  padding-top: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
  background-repeat: no-repeat;
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .sprite-#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}

@include sprites($sprite-spritesheet-sprites);
