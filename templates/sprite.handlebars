{
  // Default options
  'functions': true,
  'variableNameTransforms': ['dasherize']
}

{{#block "sprites-comment"}}
/*

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
{{/block}}
:root {
{{#block "sprites"}}
{{#each sprites}}
  $sprite-{{strings.name_name}}: '{{name}}';
  $sprite-{{strings.name_x}}: {{px.x}};
  $sprite-{{strings.name_y}}: {{px.y}};
  $sprite-{{strings.name_offset_x}}: {{px.offset_x}};
  $sprite-{{strings.name_offset_y}}: {{px.offset_y}};
  $sprite-{{strings.name_width}}: {{px.width}};
  $sprite-{{strings.name_height}}: {{px.height}};
  $sprite-{{strings.name_total_width}}: {{px.total_width}};
  $sprite-{{strings.name_total_height}}: {{px.total_height}};
  $sprite-{{strings.name_image}}: '{{{escaped_image}}}';
  $sprite-{{strings.name}}: ({{px.x}}, {{px.y}}, {{px.offset_x}}, {{px.offset_y}}, {{px.width}}, {{px.height}}, {{px.total_width}}, {{px.total_height}}, '{{{escaped_image}}}', '{{name}}', );
{{/each}}
{{/block}}
{{#block "spritesheet"}}
  $sprite-{{spritesheet_info.strings.name_width}}: {{spritesheet.px.width}};
  $sprite-{{spritesheet_info.strings.name_height}}: {{spritesheet.px.height}};
  $sprite-{{spritesheet_info.strings.name_image}}: '{{{spritesheet.escaped_image}}}';
  $sprite-{{spritesheet_info.strings.name_sprites}}: ({{#each sprites}}$sprite-{{strings.name}}, {{/each}});
  $sprite-{{spritesheet_info.strings.name}}: ({{spritesheet.px.width}}, {{spritesheet.px.height}}, '{{{spritesheet.escaped_image}}}', $sprite-{{spritesheet_info.strings.name_sprites}}, );
{{/block}}
}

{{#block "sprite-functions-comment"}}
{{#if options.functions}}
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @mixin sprite-width $icon-home;
}

.icon-email {
  @mixin sprite $icon-email;
}
*/
{{/if}}
{{/block}}
{{#block "sprite-functions"}}
{{#if options.functions}}
@define-mixin sprite-width $sprite {
  width: nth($sprite, 5);
}

@define-mixin sprite-height $sprite {
  height: 0;
  padding-top: nth($sprite, 6);
}

@define-mixin sprite-position $sprite {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@define-mixin sprite-image $sprite {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
  background-repeat: no-repeat;
}

@define-mixin sprite $sprite {
  @mixin sprite-image $sprite;
  @mixin sprite-position $sprite;
  @mixin sprite-width $sprite;
  @mixin sprite-height $sprite;
}
{{/if}}
{{/block}}

{{#block "spritesheet-functions-comment"}}
{{#if options.functions}}
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@mixin sprites $spritesheet-sprites;
*/
{{/if}}
{{/block}}
{{#block "spritesheet-functions"}}
{{#if options.functions}}
@define-mixin sprites $sprites {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .sprite-#{$sprite-name} {
      @mixin sprite $sprite;
    }
  }
}

@mixin sprites $sprite-spritesheet-sprites;
{{/if}}
{{/block}}
